-- Loadstring --
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/miroeramaa/TurtleLib/main/TurtleUiLib.lua"))()
local Main = Library:Window("üè† | Main")
local Zombie = Library:Window("üé≠ | Zombie")
local Players = Library:Window("üí´ | Players")
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "ScreenGui"
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ResetOnSpawn = true
local Toggle = Instance.new("TextButton")
Toggle.Name = "Toggle"
Toggle.Parent = ScreenGui
Toggle.BackgroundColor3 = Color3.fromRGB(0, 200, 255)
Toggle.BackgroundTransparency = 0.5
Toggle.Position = UDim2.new(0, 0, 0.454706937, 0)
Toggle.Size = UDim2.new(0, 90, 0, 38)
Toggle.Font = Enum.Font.SourceSans
Toggle.Text = "Toggle"
Toggle.TextColor3 = Color3.fromRGB(248, 248, 248)
Toggle.TextSize = 28.000
Toggle.Draggable = true
local UiCorner = Instance.new("UICorner")
UiCorner.Parent = Toggle
Toggle.MouseButton1Click:connect(function()
    Library:Hide()
end)
-- Script --
Main:Toggle("Auto Collect Items", false, function(v)
_G.AutoCollectItems = v
while _G.AutoCollectItems and workspace.Pickups:FindFirstChild("Pickup") then
for _,v in pairs(workspace:GetDescendants()) do
if v.Parent.Name == "Pickup" then
v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
end
end
end
end)
Main:Button("Collect Items", function()
for _,v in pairs(workspace:GetDescendants()) do
if v.Parent.Name == "Pickup" then
v.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
end
end
end)








-- Name of button, callback

window:Button("Button name", function()
   print("pressed button")
end)

-- Name of the toggle, default state of the toggle, callback

window:Toggle("Example toggle", true, function(bool)
    print(bool) -- bool is true or false depending on the state of the toggle
end)

-- Name of slider, minimum value, maximum value, default value, callback

window:Slider("Example Slider",0,100,20, function(value)
   print(value)
end)

-- Text, color: setting color to true will give it a rainbow effect!

window:Label("Credits to Intrer#0421", Color3.fromRGB(127, 143, 166))


-- Name, callback

window:Box("Walkspeed", function(text, focuslost)
   if focuslost then
   print(text)
   end
end)
-- The callback will be called with two arguments, the text that the player inputted and whether the player has stopped writing

-- Name, table with names of the button that you want, callback that will be called with the name of the button that was pressed

local dropdown = window:Dropdown("Example dropdown", {"Button 1", "Button 2", "Third button"}, function(name)
   print(name)
end)

-- Name

dropdown:Button("New button")

-- Key

library:Keybind("P")
